# atop cnfig
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: atop-globe-config
data:
  host: {{ .Values.hosts }}
  env: {{ .Values.env }}
  port: "{{ .Values.apisix.gateway.http.nodePort }}"
  minio_host: "{{ .Release.Name }}-minio.{{ .Release.Namespace }}:9000"
  minio_access_key: {{ .Values.minio.auth.rootUser }}
  minio_secret_key: {{ .Values.minio.auth.rootPassword }}
  elasticsearch_service_hosts: "http://{{ .Release.Name }}-elasticsearch-master-headless.{{ .Release.Namespace }}:9200"
  files_service_hosts: "{{ .Release.Name }}-files.{{ .Release.Namespace }}:8004"



# docker Secret for private hub
# {{- if .Values.atop.private }}
---
apiVersion: v1
kind: Secret
metadata:
    name: regcred
data:
    .dockerconfigjson: {{ .Values.atop.dockerconfigjson }}
type: kubernetes.io/dockerconfigjson
# {{- end }}


# script: push sometings to minio
---
apiVersion: v1
kind: ConfigMap
metadata:
    name: pusher
data:
    script: |
        import os
        from minio import Minio
        from pprint import pprint


        report = os.getenv('REPORT')
        prefix = os.getenv('PREFIX')
        minio_host =  os.getenv('MINIO_HOST')


        minioClient = Minio(
            minio_host,
            access_key='admin',
            secret_key='changeme',
            secure=False
        )

        def get_all_abs_path(source_dir):
            path_list = []
            for fpathe, dirs, fs in os.walk(source_dir):
                for f in fs:
                    p = os.path.join(fpathe, f)
                    path_list.append(p)
            return path_list

        def push(bucket_name,prefix):
            try:
                if os.path.isdir(report):
                    object_list = get_all_abs_path(report)
                else:
                    object_list = [report]
                for key in object_list:
                    minioClient.fput_object(bucket_name, prefix+key, key)
                pprint('push done')
            except Exception as err:
                pprint(err)


        if __name__ == "__main__":
            if prefix == '':
                pass
            else:
                if os.path.exists(report):
                    try:
                        push('result', prefix)
                        os.system(f"mkdir -p /report/{prefix}{report}")
                        os.system(f"/bin/cp -rf {report}/* /report/{prefix}{report}")
                    except Exception as err:
                        pprint(err)    
                else:
                    pprint('report not exists')
